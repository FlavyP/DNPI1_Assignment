//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CottageWars.DatabaseServiceReference {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="MySuperAwesomeService", ConfigurationName="DatabaseServiceReference.DatabaseManagerServiceSoap")]
    public interface DatabaseManagerServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="MySuperAwesomeService/checkForUserE", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool checkForUserE(string userEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="MySuperAwesomeService/checkForUserE", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> checkForUserEAsync(string userEmail);
        
        [System.ServiceModel.OperationContractAttribute(Action="MySuperAwesomeService/checkForUserUP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool checkForUserUP(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="MySuperAwesomeService/checkForUserUP", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> checkForUserUPAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="MySuperAwesomeService/registerUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool registerUser(string username, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="MySuperAwesomeService/registerUser", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> registerUserAsync(string username, string password, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="MySuperAwesomeService/getUnits", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        short[] getUnits(string Username);
        
        [System.ServiceModel.OperationContractAttribute(Action="MySuperAwesomeService/getUnits", ReplyAction="*")]
        System.Threading.Tasks.Task<short[]> getUnitsAsync(string Username);
        
        [System.ServiceModel.OperationContractAttribute(Action="MySuperAwesomeService/getResources", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        short[] getResources(string Username);
        
        [System.ServiceModel.OperationContractAttribute(Action="MySuperAwesomeService/getResources", ReplyAction="*")]
        System.Threading.Tasks.Task<short[]> getResourcesAsync(string Username);
        
        [System.ServiceModel.OperationContractAttribute(Action="MySuperAwesomeService/getBuilding", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable getBuilding(string Username, string building);
        
        [System.ServiceModel.OperationContractAttribute(Action="MySuperAwesomeService/getBuilding", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> getBuildingAsync(string Username, string building);
        
        [System.ServiceModel.OperationContractAttribute(Action="MySuperAwesomeService/updateBuilding", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool updateBuilding(string username, string building);
        
        [System.ServiceModel.OperationContractAttribute(Action="MySuperAwesomeService/updateBuilding", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> updateBuildingAsync(string username, string building);
        
        [System.ServiceModel.OperationContractAttribute(Action="MySuperAwesomeService/buildUnits", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool buildUnits(string username, int gladiator, int brute, int infatry);
        
        [System.ServiceModel.OperationContractAttribute(Action="MySuperAwesomeService/buildUnits", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> buildUnitsAsync(string username, int gladiator, int brute, int infatry);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface DatabaseManagerServiceSoapChannel : CottageWars.DatabaseServiceReference.DatabaseManagerServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DatabaseManagerServiceSoapClient : System.ServiceModel.ClientBase<CottageWars.DatabaseServiceReference.DatabaseManagerServiceSoap>, CottageWars.DatabaseServiceReference.DatabaseManagerServiceSoap {
        
        public DatabaseManagerServiceSoapClient() {
        }
        
        public DatabaseManagerServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DatabaseManagerServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseManagerServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool checkForUserE(string userEmail) {
            return base.Channel.checkForUserE(userEmail);
        }
        
        public System.Threading.Tasks.Task<bool> checkForUserEAsync(string userEmail) {
            return base.Channel.checkForUserEAsync(userEmail);
        }
        
        public bool checkForUserUP(string username, string password) {
            return base.Channel.checkForUserUP(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> checkForUserUPAsync(string username, string password) {
            return base.Channel.checkForUserUPAsync(username, password);
        }
        
        public bool registerUser(string username, string password, string email) {
            return base.Channel.registerUser(username, password, email);
        }
        
        public System.Threading.Tasks.Task<bool> registerUserAsync(string username, string password, string email) {
            return base.Channel.registerUserAsync(username, password, email);
        }
        
        public short[] getUnits(string Username) {
            return base.Channel.getUnits(Username);
        }
        
        public System.Threading.Tasks.Task<short[]> getUnitsAsync(string Username) {
            return base.Channel.getUnitsAsync(Username);
        }
        
        public short[] getResources(string Username) {
            return base.Channel.getResources(Username);
        }
        
        public System.Threading.Tasks.Task<short[]> getResourcesAsync(string Username) {
            return base.Channel.getResourcesAsync(Username);
        }
        
        public System.Data.DataTable getBuilding(string Username, string building) {
            return base.Channel.getBuilding(Username, building);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> getBuildingAsync(string Username, string building) {
            return base.Channel.getBuildingAsync(Username, building);
        }
        
        public bool updateBuilding(string username, string building) {
            return base.Channel.updateBuilding(username, building);
        }
        
        public System.Threading.Tasks.Task<bool> updateBuildingAsync(string username, string building) {
            return base.Channel.updateBuildingAsync(username, building);
        }
        
        public bool buildUnits(string username, int gladiator, int brute, int infatry) {
            return base.Channel.buildUnits(username, gladiator, brute, infatry);
        }
        
        public System.Threading.Tasks.Task<bool> buildUnitsAsync(string username, int gladiator, int brute, int infatry) {
            return base.Channel.buildUnitsAsync(username, gladiator, brute, infatry);
        }
    }
}
